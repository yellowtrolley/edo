// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package it.verding.edo.model;

import it.verding.edo.model.Bar;
import it.verding.edo.model.BarDataOnDemand;
import it.verding.edo.service.BarService;
import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect BarDataOnDemand_Roo_DataOnDemand {
    
    declare @type: BarDataOnDemand: @Component;
    
    private Random BarDataOnDemand.rnd = new SecureRandom();
    
    private List<Bar> BarDataOnDemand.data;
    
    @Autowired
    BarService BarDataOnDemand.barService;
    
    public Bar BarDataOnDemand.getNewTransientBar(int index) {
        Bar obj = new Bar();
        setBirra(obj, index);
        return obj;
    }
    
    public void BarDataOnDemand.setBirra(Bar obj, int index) {
        String birra = "birra_" + index;
        obj.setBirra(birra);
    }
    
    public Bar BarDataOnDemand.getSpecificBar(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Bar obj = data.get(index);
        BigInteger id = obj.getId();
        return barService.findBar(id);
    }
    
    public Bar BarDataOnDemand.getRandomBar() {
        init();
        Bar obj = data.get(rnd.nextInt(data.size()));
        BigInteger id = obj.getId();
        return barService.findBar(id);
    }
    
    public boolean BarDataOnDemand.modifyBar(Bar obj) {
        return false;
    }
    
    public void BarDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = barService.findBarEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Bar' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Bar>();
        for (int i = 0; i < 10; i++) {
            Bar obj = getNewTransientBar(i);
            try {
                barService.saveBar(obj);
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
